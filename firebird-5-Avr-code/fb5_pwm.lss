
fb5_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000aaa  00000b3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aaa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800202  00800202  00000b40  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea8  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8c  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cf  00000000  00000000  000032b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_51>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 31       	cpi	r26, 0x1A	; 26
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <main>
 122:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <motion_pin_config>:
// DDRJ = 0xFF; //PORT J is configured as output
// PORTJ = 0x00; //Output is set to 0
// }

void motion_pin_config (void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;			// refer table 3.3 hardware manual	
 132:	81 e2       	ldi	r24, 0x21	; 33
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	21 e2       	ldi	r18, 0x21	; 33
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	2f 60       	ori	r18, 0x0F	; 15
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
 144:	82 e2       	ldi	r24, 0x22	; 34
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	22 e2       	ldi	r18, 0x22	; 34
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	20 7f       	andi	r18, 0xF0	; 240
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;		//Setting PL3 and PL4 pins as output for PWM generation
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	2a e0       	ldi	r18, 0x0A	; 10
 15c:	31 e0       	ldi	r19, 0x01	; 1
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	28 61       	ori	r18, 0x18	; 24
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18;		//PL3 and PL4 pins are for velocity control using PWM.
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	2b e0       	ldi	r18, 0x0B	; 11
 16e:	31 e0       	ldi	r19, 0x01	; 1
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	28 61       	ori	r18, 0x18	; 24
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
}
 17a:	00 00       	nop
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; //set PORTF direction as input
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	10 82       	st	Z, r1
 PORTF = 0x00; //set PORTF pins floating
 192:	81 e3       	ldi	r24, 0x31	; 49
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	10 82       	st	Z, r1
 DDRK = 0x00; //set PORTK direction as input
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	fc 01       	movw	r30, r24
 1a0:	10 82       	st	Z, r1
 PORTK = 0x00; //set PORTK pins floating
 1a2:	88 e0       	ldi	r24, 0x08	; 8
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	fc 01       	movw	r30, r24
 1a8:	10 82       	st	Z, r1
}
 1aa:	00 00       	nop
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <interrupt_switch_config>:
// 	 PORTE = PORTE | 0x20;			//Enable internal pull-up for PORTE 4 pin
// }

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input  
 1ba:	8d e2       	ldi	r24, 0x2D	; 45
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2d e2       	ldi	r18, 0x2D	; 45
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	2f 77       	andi	r18, 0x7F	; 127
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
 1cc:	8e e2       	ldi	r24, 0x2E	; 46
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	2e e2       	ldi	r18, 0x2E	; 46
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	20 68       	ori	r18, 0x80	; 128
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
}
 1de:	00 00       	nop
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <port_init>:


//Function to initialize ports
void port_init()
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 1ee:	0e 94 95 00 	call	0x12a	; 0x12a <motion_pin_config>
    // right_encoder_pin_config();			//right encoder pin config	
	// buzzer_pin_config();
	// LED_bargraph_config();
	// adc_pin_config();
	// interrupt_switch_config();
}
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <adc_init>:

//Function to Initialize ADC
void adc_init()
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
 202:	8a e7       	ldi	r24, 0x7A	; 122
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 20a:	8b e7       	ldi	r24, 0x7B	; 123
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 212:	8c e7       	ldi	r24, 0x7C	; 124
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	20 e2       	ldi	r18, 0x20	; 32
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
	ACSR = 0x80;
 21c:	80 e5       	ldi	r24, 0x50	; 80
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	20 e8       	ldi	r18, 0x80	; 128
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 226:	8a e7       	ldi	r24, 0x7A	; 122
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	26 e8       	ldi	r18, 0x86	; 134
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
}
 230:	00 00       	nop
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <ADC_Conversion>:

//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	88 30       	cpi	r24, 0x08	; 8
 24a:	28 f0       	brcs	.+10     	; 0x256 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
 24c:	8b e7       	ldi	r24, 0x7B	; 123
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	28 e0       	ldi	r18, 0x08	; 8
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	87 70       	andi	r24, 0x07	; 7
 25a:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
 25c:	8c e7       	ldi	r24, 0x7C	; 124
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a 81       	ldd	r18, Y+2	; 0x02
 262:	20 62       	ori	r18, 0x20	; 32
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 268:	8a e7       	ldi	r24, 0x7A	; 122
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	2a e7       	ldi	r18, 0x7A	; 122
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	f9 01       	movw	r30, r18
 272:	20 81       	ld	r18, Z
 274:	20 64       	ori	r18, 0x40	; 64
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 27a:	00 00       	nop
 27c:	8a e7       	ldi	r24, 0x7A	; 122
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	88 2f       	mov	r24, r24
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	80 71       	andi	r24, 0x10	; 16
 28a:	99 27       	eor	r25, r25
 28c:	89 2b       	or	r24, r25
 28e:	b1 f3       	breq	.-20     	; 0x27c <ADC_Conversion+0x44>
	a=ADCH;
 290:	89 e7       	ldi	r24, 0x79	; 121
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 29a:	8a e7       	ldi	r24, 0x7A	; 122
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	2a e7       	ldi	r18, 0x7A	; 122
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	f9 01       	movw	r30, r18
 2a4:	20 81       	ld	r18, Z
 2a6:	20 61       	ori	r18, 0x10	; 16
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
	ADCSRB = 0x00;
 2ac:	8b e7       	ldi	r24, 0x7B	; 123
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	fc 01       	movw	r30, r24
 2b2:	10 82       	st	Z, r1
	return a;
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz

void timer5_init()
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
 2c8:	81 e2       	ldi	r24, 0x21	; 33
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	fc 01       	movw	r30, r24
 2ce:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 2d0:	85 e2       	ldi	r24, 0x25	; 37
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 2da:	84 e2       	ldi	r24, 0x24	; 36
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 2e4:	89 e2       	ldi	r24, 0x29	; 41
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	fc 01       	movw	r30, r24
 2ea:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 2ec:	88 e2       	ldi	r24, 0x28	; 40
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	fc 01       	movw	r30, r24
 2f4:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 2f6:	8b e2       	ldi	r24, 0x2B	; 43
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	fc 01       	movw	r30, r24
 2fc:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 2fe:	8a e2       	ldi	r24, 0x2A	; 42
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 308:	8d e2       	ldi	r24, 0x2D	; 45
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	fc 01       	movw	r30, r24
 30e:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 310:	8c e2       	ldi	r24, 0x2C	; 44
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	29 ea       	ldi	r18, 0xA9	; 169
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
	For Overriding normal port functionality to OCRnA outputs.
	{WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 324:	81 e2       	ldi	r24, 0x21	; 33
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	2b e0       	ldi	r18, 0x0B	; 11
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
}
 32e:	00 00       	nop
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	1f 92       	push	r1
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
 346:	88 e2       	ldi	r24, 0x28	; 40
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
 350:	8a e2       	ldi	r24, 0x2A	; 42
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	2a 81       	ldd	r18, Y+2	; 0x02
 356:	fc 01       	movw	r30, r24
 358:	20 83       	st	Z, r18
}
 35a:	00 00       	nop
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 UCSR2B = 0x00;		//disable while setting baud rate
 36e:	81 ed       	ldi	r24, 0xD1	; 209
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	fc 01       	movw	r30, r24
 374:	10 82       	st	Z, r1
 UCSR2A = 0x00;
 376:	80 ed       	ldi	r24, 0xD0	; 208
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	10 82       	st	Z, r1
 UCSR2C = 0x06;
 37e:	82 ed       	ldi	r24, 0xD2	; 210
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	26 e0       	ldi	r18, 0x06	; 6
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
 UBRR2L = 0x5F;		//set baud rate lo
 388:	84 ed       	ldi	r24, 0xD4	; 212
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	2f e5       	ldi	r18, 0x5F	; 95
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
 UBRR2H = 0x00;		//set baud rate hi
 392:	85 ed       	ldi	r24, 0xD5	; 213
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	10 82       	st	Z, r1
 UCSR2B = 0x98;
 39a:	81 ed       	ldi	r24, 0xD1	; 209
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	28 e9       	ldi	r18, 0x98	; 152
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
}
 3a4:	00 00       	nop
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <__vector_51>:


ISR(USART2_RX_vect)		// ISR for receive complete interrupt
{	/*********************************************************************************
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 3bc:	0f 92       	push	r0
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
	We will take four bytes of data at a time ,t,he first is an escape character 0x7E.
	This is followed by a direction character 8,6,4,2,5 for F,R,L,B,Stop respectively.
	Final two bytes indicating the PWM input to each motor.
	*********************************************************************************/
	incomingByte = UDR2; 
 3de:	86 ed       	ldi	r24, 0xD6	; 214
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	fc 01       	movw	r30, r24
 3e4:	80 81       	ld	r24, Z
 3e6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <incomingByte>
	d[packet_cnt]=incomingByte;
 3ea:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <packet_cnt>
 3ee:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <packet_cnt+0x1>
 3f2:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <incomingByte>
 3f6:	8d 5e       	subi	r24, 0xED	; 237
 3f8:	9d 4f       	sbci	r25, 0xFD	; 253
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
	//UDR2=incomingByte;
	packet_cnt++;
 3fe:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <packet_cnt>
 402:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <packet_cnt+0x1>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <packet_cnt+0x1>
 40c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <packet_cnt>
	if (d[0]!='A')
 410:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <d>
 414:	81 34       	cpi	r24, 0x41	; 65
 416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	packet_cnt=0; 
 418:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <packet_cnt+0x1>
 41c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <packet_cnt>
	//UDR2=packet_cnt;
	if( packet_cnt>=packet_len && d[0]=='A')
 420:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <packet_cnt>
 424:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <packet_cnt+0x1>
 428:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 42c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 430:	28 17       	cp	r18, r24
 432:	39 07       	cpc	r19, r25
 434:	0c f4       	brge	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 436:	50 c0       	rjmp	.+160    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 438:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <d>
 43c:	81 34       	cpi	r24, 0x41	; 65
 43e:	09 f0       	breq	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	4b c0       	rjmp	.+150    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	{
		packet_cnt=0;	
 442:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <packet_cnt+0x1>
 446:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <packet_cnt>
		velocity((int)d[2],(int)d[3]);													  
 44a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <d+0x3>
 44e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <d+0x2>
 452:	69 2f       	mov	r22, r25
 454:	0e 94 9b 01 	call	0x336	; 0x336 <velocity>
		if(d[1] == 0x38) //ASCII for '8'	//ASCII value of 8
 458:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d+0x1>
 45c:	88 33       	cpi	r24, 0x38	; 56
 45e:	59 f4       	brne	.+22     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		{
			PORTA=0x06;															//forward
 460:	82 e2       	ldi	r24, 0x22	; 34
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	26 e0       	ldi	r18, 0x06	; 6
 466:	fc 01       	movw	r30, r24
 468:	20 83       	st	Z, r18
			//Both wheels move forward
			FBL_Flag=1;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <FBL_Flag>
			FBR_Flag=1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
		}

		if(d[1] == 0x32) //ASCII for '2'	//ASCII value of 2
 476:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d+0x1>
 47a:	82 33       	cpi	r24, 0x32	; 50
 47c:	49 f4       	brne	.+18     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		{
			PORTA=0x09;															//back
 47e:	82 e2       	ldi	r24, 0x22	; 34
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	29 e0       	ldi	r18, 0x09	; 9
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
			//Both wheels move back.
			FBL_Flag=0;
 488:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <FBL_Flag>
			FBR_Flag=0;
 48c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
		}

		if(d[1] == 0x34) //ASCII for '4'		//ASCII value of 4
 490:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d+0x1>
 494:	84 33       	cpi	r24, 0x34	; 52
 496:	51 f4       	brne	.+20     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		{
			PORTA=0x05;															//left
 498:	82 e2       	ldi	r24, 0x22	; 34
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	25 e0       	ldi	r18, 0x05	; 5
 49e:	fc 01       	movw	r30, r24
 4a0:	20 83       	st	Z, r18
			//Right wheel should move with forward and LEft backward for perfect left turn.
			FBL_Flag=0;
 4a2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <FBL_Flag>
			FBR_Flag=1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
		}

		if(d[1] == 0x36) //ASCII for '6' //ASCII value of 6
 4ac:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d+0x1>
 4b0:	86 33       	cpi	r24, 0x36	; 54
 4b2:	51 f4       	brne	.+20     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		{
			PORTA=0x0A;															//right
 4b4:	82 e2       	ldi	r24, 0x22	; 34
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	2a e0       	ldi	r18, 0x0A	; 10
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
			//Left wheel should move with forward and right backward for perfect right turn..
			FBL_Flag=1;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <FBL_Flag>
			FBR_Flag=0;
 4c4:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
		}

		if(d[1] == 0x35) //ASCII for '5'	//ASCII value of 5
 4c8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <d+0x1>
 4cc:	85 33       	cpi	r24, 0x35	; 53
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		{
			PORTA=0x00;					//stop
 4d0:	82 e2       	ldi	r24, 0x22	; 34
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	fc 01       	movw	r30, r24
 4d6:	10 82       	st	Z, r1
		}
		// Testing whether the command's written onto the appropriate register.
		// UDR2 = (unsigned char) OCR5AL;
	}

}
 4d8:	00 00       	nop
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 4fc:	0f 90       	pop	r0
 4fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <timer4_init>:
//Interrupt which runs every 100 ms. We use this to send data of the current encoder position.

void timer4_init(void)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 TCCR4B = 0x00; //stop
 510:	81 ea       	ldi	r24, 0xA1	; 161
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	10 82       	st	Z, r1
 TCNT4H = 0xF7; //247 //Counter higher 8 bit value
 518:	85 ea       	ldi	r24, 0xA5	; 165
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	27 ef       	ldi	r18, 0xF7	; 247
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
 TCNT4L = 0x00; //0+247*256 = 63232 to reach 65535 we need 2303 counts.
 522:	84 ea       	ldi	r24, 0xA4	; 164
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	fc 01       	movw	r30, r24
 528:	10 82       	st	Z, r1
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used Since TIMSK=0x01 we only use the overflow counter.
 52a:	89 ea       	ldi	r24, 0xA9	; 169
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	fc 01       	movw	r30, r24
 530:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
 532:	88 ea       	ldi	r24, 0xA8	; 168
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	fc 01       	movw	r30, r24
 538:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
 53a:	8b ea       	ldi	r24, 0xAB	; 171
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	fc 01       	movw	r30, r24
 540:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
 542:	8a ea       	ldi	r24, 0xAA	; 170
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
 54a:	8d ea       	ldi	r24, 0xAD	; 173
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	fc 01       	movw	r30, r24
 550:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
 552:	8c ea       	ldi	r24, 0xAC	; 172
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
 55a:	87 ea       	ldi	r24, 0xA7	; 167
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	fc 01       	movw	r30, r24
 560:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
 562:	86 ea       	ldi	r24, 0xA6	; 166
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	fc 01       	movw	r30, r24
 568:	10 82       	st	Z, r1
 TCCR4A = 0x00; //This ensures normal mode as WGM0,1 are both 0. In addition WGM2 in in TCCR4B (in the 4th bit from right) is also 0
 56a:	80 ea       	ldi	r24, 0xA0	; 160
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	10 82       	st	Z, r1
 TCCR4C = 0x00; //Just set to zero for now.
 572:	82 ea       	ldi	r24, 0xA2	; 162
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	fc 01       	movw	r30, r24
 578:	10 82       	st	Z, r1
 TCCR4B = 0x04; //start Timer 0x04. Prescaler is 64 for CS0:2 set to 011. 14745600/64=230400  
 57a:	81 ea       	ldi	r24, 0xA1	; 161
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	24 e0       	ldi	r18, 0x04	; 4
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
}
 584:	00 00       	nop
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 cli();				//Clears the global interrupts
 594:	f8 94       	cli
 port_init();		//Initializes all the ports
 596:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <port_init>
 uart2_init();		//Initailize UART2 for serial communiaction
 59a:	0e 94 b3 01 	call	0x366	; 0x366 <uart2_init>
 adc_init();
 59e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <adc_init>
 timer5_init();
 5a2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <timer5_init>
//  timer4_init();
 TIMSK4 = 0x01;    //Enables the overflow interrupt.
 5a6:	82 e7       	ldi	r24, 0x72	; 114
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
//  left_position_encoder_interrupt_init();
//  right_position_encoder_interrupt_init();
 sei();				//Enables the global interrupts
 5b0:	78 94       	sei
}
 5b2:	00 00       	nop
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <main>:
// 	ShaftCountLeft--;			//decrement left shaft position count for backward motion			
// }

//Main Function
int main(void)
{
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 5c2:	0e 94 c6 02 	call	0x58c	; 0x58c <init_devices>
	while(1)
	{	
		// BATT_Voltage = 0.55;
		// BATT_Voltage = ADC_Conversion(0);
		// BATT_Voltage = (((ADC_Conversion(0))*0.046));
		BATT_Voltage = ((ADC_Conversion(0)*100)*0.07902) + 0.7;	//Prints Battery Voltage Status
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 1c 01 	call	0x238	; 0x238 <ADC_Conversion>
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	44 e6       	ldi	r20, 0x64	; 100
 5d2:	42 9f       	mul	r20, r18
 5d4:	c0 01       	movw	r24, r0
 5d6:	43 9f       	mul	r20, r19
 5d8:	90 0d       	add	r25, r0
 5da:	11 24       	eor	r1, r1
 5dc:	09 2e       	mov	r0, r25
 5de:	00 0c       	add	r0, r0
 5e0:	aa 0b       	sbc	r26, r26
 5e2:	bb 0b       	sbc	r27, r27
 5e4:	bc 01       	movw	r22, r24
 5e6:	cd 01       	movw	r24, r26
 5e8:	0e 94 36 04 	call	0x86c	; 0x86c <__floatsisf>
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
 5f0:	2d e3       	ldi	r18, 0x3D	; 61
 5f2:	35 ed       	ldi	r19, 0xD5	; 213
 5f4:	41 ea       	ldi	r20, 0xA1	; 161
 5f6:	5d e3       	ldi	r21, 0x3D	; 61
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__mulsf3>
 600:	dc 01       	movw	r26, r24
 602:	cb 01       	movw	r24, r22
 604:	23 e3       	ldi	r18, 0x33	; 51
 606:	33 e3       	ldi	r19, 0x33	; 51
 608:	43 e3       	ldi	r20, 0x33	; 51
 60a:	5f e3       	ldi	r21, 0x3F	; 63
 60c:	bc 01       	movw	r22, r24
 60e:	cd 01       	movw	r24, r26
 610:	0e 94 c3 03 	call	0x786	; 0x786 <__addsf3>
 614:	dc 01       	movw	r26, r24
 616:	cb 01       	movw	r24, r22
 618:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <BATT_Voltage>
 61c:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <BATT_Voltage+0x1>
 620:	a0 93 0f 02 	sts	0x020F, r26	; 0x80020f <BATT_Voltage+0x2>
 624:	b0 93 10 02 	sts	0x0210, r27	; 0x800210 <BATT_Voltage+0x3>
		
		if (BATT_Voltage < 0x28A){
 628:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 62c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 630:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 634:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e8       	ldi	r19, 0x80	; 128
 63c:	42 e2       	ldi	r20, 0x22	; 34
 63e:	54 e4       	ldi	r21, 0x44	; 68
 640:	bc 01       	movw	r22, r24
 642:	cd 01       	movw	r24, r26
 644:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 648:	88 23       	and	r24, r24
 64a:	34 f4       	brge	.+12     	; 0x658 <main+0x9e>
			PORTJ = 0x80; //Output is set to 1 bar
 64c:	85 e0       	ldi	r24, 0x05	; 5
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	20 e8       	ldi	r18, 0x80	; 128
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
 656:	b7 cf       	rjmp	.-146    	; 0x5c6 <main+0xc>
		}
		else if (BATT_Voltage < 0x2BC){
 658:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 65c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 660:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 664:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	4f e2       	ldi	r20, 0x2F	; 47
 66e:	54 e4       	ldi	r21, 0x44	; 68
 670:	bc 01       	movw	r22, r24
 672:	cd 01       	movw	r24, r26
 674:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 678:	88 23       	and	r24, r24
 67a:	34 f4       	brge	.+12     	; 0x688 <main+0xce>
			PORTJ = 0xC0; //Output is set to 2 bars
 67c:	85 e0       	ldi	r24, 0x05	; 5
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	20 ec       	ldi	r18, 0xC0	; 192
 682:	fc 01       	movw	r30, r24
 684:	20 83       	st	Z, r18
 686:	9f cf       	rjmp	.-194    	; 0x5c6 <main+0xc>
		}
		else if (BATT_Voltage < 0x2EE){
 688:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 68c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 690:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 694:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e8       	ldi	r19, 0x80	; 128
 69c:	4b e3       	ldi	r20, 0x3B	; 59
 69e:	54 e4       	ldi	r21, 0x44	; 68
 6a0:	bc 01       	movw	r22, r24
 6a2:	cd 01       	movw	r24, r26
 6a4:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 6a8:	88 23       	and	r24, r24
 6aa:	34 f4       	brge	.+12     	; 0x6b8 <main+0xfe>
			PORTJ = 0xE0; //Output is set to 3 bars
 6ac:	85 e0       	ldi	r24, 0x05	; 5
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	20 ee       	ldi	r18, 0xE0	; 224
 6b2:	fc 01       	movw	r30, r24
 6b4:	20 83       	st	Z, r18
 6b6:	87 cf       	rjmp	.-242    	; 0x5c6 <main+0xc>
		}
		else if (BATT_Voltage < 0x320){
 6b8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 6bc:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 6c0:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 6c4:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 6c8:	20 e0       	ldi	r18, 0x00	; 0
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	48 e4       	ldi	r20, 0x48	; 72
 6ce:	54 e4       	ldi	r21, 0x44	; 68
 6d0:	bc 01       	movw	r22, r24
 6d2:	cd 01       	movw	r24, r26
 6d4:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 6d8:	88 23       	and	r24, r24
 6da:	34 f4       	brge	.+12     	; 0x6e8 <main+0x12e>
			PORTJ = 0xF0; //Output is set to 4 bars34                                                                                     
 6dc:	85 e0       	ldi	r24, 0x05	; 5
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	20 ef       	ldi	r18, 0xF0	; 240
 6e2:	fc 01       	movw	r30, r24
 6e4:	20 83       	st	Z, r18
 6e6:	6f cf       	rjmp	.-290    	; 0x5c6 <main+0xc>
		}
		else if (BATT_Voltage < 0x352){
 6e8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 6ec:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 6f0:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 6f4:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e8       	ldi	r19, 0x80	; 128
 6fc:	44 e5       	ldi	r20, 0x54	; 84
 6fe:	54 e4       	ldi	r21, 0x44	; 68
 700:	bc 01       	movw	r22, r24
 702:	cd 01       	movw	r24, r26
 704:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 708:	88 23       	and	r24, r24
 70a:	34 f4       	brge	.+12     	; 0x718 <main+0x15e>
			PORTJ = 0xF8; //Output is set to 5 bars
 70c:	85 e0       	ldi	r24, 0x05	; 5
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	28 ef       	ldi	r18, 0xF8	; 248
 712:	fc 01       	movw	r30, r24
 714:	20 83       	st	Z, r18
 716:	57 cf       	rjmp	.-338    	; 0x5c6 <main+0xc>
		}
		else if (BATT_Voltage < 0x384){
 718:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 71c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 720:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 724:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 728:	20 e0       	ldi	r18, 0x00	; 0
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	41 e6       	ldi	r20, 0x61	; 97
 72e:	54 e4       	ldi	r21, 0x44	; 68
 730:	bc 01       	movw	r22, r24
 732:	cd 01       	movw	r24, r26
 734:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 738:	88 23       	and	r24, r24
 73a:	34 f4       	brge	.+12     	; 0x748 <main+0x18e>
			PORTJ = 0xFC; //Output is set to 6 bars
 73c:	85 e0       	ldi	r24, 0x05	; 5
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	2c ef       	ldi	r18, 0xFC	; 252
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
 746:	3f cf       	rjmp	.-386    	; 0x5c6 <main+0xc>
		}
		else if (BATT_Voltage < 0x3B6){
 748:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <BATT_Voltage>
 74c:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <BATT_Voltage+0x1>
 750:	a0 91 0f 02 	lds	r26, 0x020F	; 0x80020f <BATT_Voltage+0x2>
 754:	b0 91 10 02 	lds	r27, 0x0210	; 0x800210 <BATT_Voltage+0x3>
 758:	20 e0       	ldi	r18, 0x00	; 0
 75a:	30 e8       	ldi	r19, 0x80	; 128
 75c:	4d e6       	ldi	r20, 0x6D	; 109
 75e:	54 e4       	ldi	r21, 0x44	; 68
 760:	bc 01       	movw	r22, r24
 762:	cd 01       	movw	r24, r26
 764:	0e 94 2f 04 	call	0x85e	; 0x85e <__cmpsf2>
 768:	88 23       	and	r24, r24
 76a:	34 f4       	brge	.+12     	; 0x778 <main+0x1be>
			PORTJ = 0xFE; //Output is set to 7 bars
 76c:	85 e0       	ldi	r24, 0x05	; 5
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	2e ef       	ldi	r18, 0xFE	; 254
 772:	fc 01       	movw	r30, r24
 774:	20 83       	st	Z, r18
 776:	27 cf       	rjmp	.-434    	; 0x5c6 <main+0xc>
		}
		else {
			PORTJ = 0xFF; //Output is set to 8 bars
 778:	85 e0       	ldi	r24, 0x05	; 5
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	2f ef       	ldi	r18, 0xFF	; 255
 77e:	fc 01       	movw	r30, r24
 780:	20 83       	st	Z, r18

		//USART_Transmit(23);
		//unsigned long measurement=256;
		//USART_Transmit(measurement/256); //Encoder measurements are 2-bytes long and require 2 bytes to be sent. 
		//USART_Transmit(measurement%256);		
	}
 782:	21 cf       	rjmp	.-446    	; 0x5c6 <main+0xc>

00000784 <__subsf3>:
 784:	50 58       	subi	r21, 0x80	; 128

00000786 <__addsf3>:
 786:	bb 27       	eor	r27, r27
 788:	aa 27       	eor	r26, r26
 78a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__addsf3x>
 78e:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_round>
 792:	0e 94 9e 04 	call	0x93c	; 0x93c <__fp_pscA>
 796:	38 f0       	brcs	.+14     	; 0x7a6 <__addsf3+0x20>
 798:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscB>
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__addsf3+0x20>
 79e:	39 f4       	brne	.+14     	; 0x7ae <__addsf3+0x28>
 7a0:	9f 3f       	cpi	r25, 0xFF	; 255
 7a2:	19 f4       	brne	.+6      	; 0x7aa <__addsf3+0x24>
 7a4:	26 f4       	brtc	.+8      	; 0x7ae <__addsf3+0x28>
 7a6:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>
 7aa:	0e f4       	brtc	.+2      	; 0x7ae <__addsf3+0x28>
 7ac:	e0 95       	com	r30
 7ae:	e7 fb       	bst	r30, 7
 7b0:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>

000007b4 <__addsf3x>:
 7b4:	e9 2f       	mov	r30, r25
 7b6:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_split3>
 7ba:	58 f3       	brcs	.-42     	; 0x792 <__addsf3+0xc>
 7bc:	ba 17       	cp	r27, r26
 7be:	62 07       	cpc	r22, r18
 7c0:	73 07       	cpc	r23, r19
 7c2:	84 07       	cpc	r24, r20
 7c4:	95 07       	cpc	r25, r21
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__addsf3x+0x1c>
 7c8:	79 f4       	brne	.+30     	; 0x7e8 <__addsf3x+0x34>
 7ca:	a6 f5       	brtc	.+104    	; 0x834 <__addsf3x+0x80>
 7cc:	0c 94 df 04 	jmp	0x9be	; 0x9be <__fp_zero>
 7d0:	0e f4       	brtc	.+2      	; 0x7d4 <__addsf3x+0x20>
 7d2:	e0 95       	com	r30
 7d4:	0b 2e       	mov	r0, r27
 7d6:	ba 2f       	mov	r27, r26
 7d8:	a0 2d       	mov	r26, r0
 7da:	0b 01       	movw	r0, r22
 7dc:	b9 01       	movw	r22, r18
 7de:	90 01       	movw	r18, r0
 7e0:	0c 01       	movw	r0, r24
 7e2:	ca 01       	movw	r24, r20
 7e4:	a0 01       	movw	r20, r0
 7e6:	11 24       	eor	r1, r1
 7e8:	ff 27       	eor	r31, r31
 7ea:	59 1b       	sub	r21, r25
 7ec:	99 f0       	breq	.+38     	; 0x814 <__addsf3x+0x60>
 7ee:	59 3f       	cpi	r21, 0xF9	; 249
 7f0:	50 f4       	brcc	.+20     	; 0x806 <__addsf3x+0x52>
 7f2:	50 3e       	cpi	r21, 0xE0	; 224
 7f4:	68 f1       	brcs	.+90     	; 0x850 <__addsf3x+0x9c>
 7f6:	1a 16       	cp	r1, r26
 7f8:	f0 40       	sbci	r31, 0x00	; 0
 7fa:	a2 2f       	mov	r26, r18
 7fc:	23 2f       	mov	r18, r19
 7fe:	34 2f       	mov	r19, r20
 800:	44 27       	eor	r20, r20
 802:	58 5f       	subi	r21, 0xF8	; 248
 804:	f3 cf       	rjmp	.-26     	; 0x7ec <__addsf3x+0x38>
 806:	46 95       	lsr	r20
 808:	37 95       	ror	r19
 80a:	27 95       	ror	r18
 80c:	a7 95       	ror	r26
 80e:	f0 40       	sbci	r31, 0x00	; 0
 810:	53 95       	inc	r21
 812:	c9 f7       	brne	.-14     	; 0x806 <__addsf3x+0x52>
 814:	7e f4       	brtc	.+30     	; 0x834 <__addsf3x+0x80>
 816:	1f 16       	cp	r1, r31
 818:	ba 0b       	sbc	r27, r26
 81a:	62 0b       	sbc	r22, r18
 81c:	73 0b       	sbc	r23, r19
 81e:	84 0b       	sbc	r24, r20
 820:	ba f0       	brmi	.+46     	; 0x850 <__addsf3x+0x9c>
 822:	91 50       	subi	r25, 0x01	; 1
 824:	a1 f0       	breq	.+40     	; 0x84e <__addsf3x+0x9a>
 826:	ff 0f       	add	r31, r31
 828:	bb 1f       	adc	r27, r27
 82a:	66 1f       	adc	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	c2 f7       	brpl	.-16     	; 0x822 <__addsf3x+0x6e>
 832:	0e c0       	rjmp	.+28     	; 0x850 <__addsf3x+0x9c>
 834:	ba 0f       	add	r27, r26
 836:	62 1f       	adc	r22, r18
 838:	73 1f       	adc	r23, r19
 83a:	84 1f       	adc	r24, r20
 83c:	48 f4       	brcc	.+18     	; 0x850 <__addsf3x+0x9c>
 83e:	87 95       	ror	r24
 840:	77 95       	ror	r23
 842:	67 95       	ror	r22
 844:	b7 95       	ror	r27
 846:	f7 95       	ror	r31
 848:	9e 3f       	cpi	r25, 0xFE	; 254
 84a:	08 f0       	brcs	.+2      	; 0x84e <__addsf3x+0x9a>
 84c:	b0 cf       	rjmp	.-160    	; 0x7ae <__addsf3+0x28>
 84e:	93 95       	inc	r25
 850:	88 0f       	add	r24, r24
 852:	08 f0       	brcs	.+2      	; 0x856 <__addsf3x+0xa2>
 854:	99 27       	eor	r25, r25
 856:	ee 0f       	add	r30, r30
 858:	97 95       	ror	r25
 85a:	87 95       	ror	r24
 85c:	08 95       	ret

0000085e <__cmpsf2>:
 85e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fp_cmp>
 862:	08 f4       	brcc	.+2      	; 0x866 <__cmpsf2+0x8>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	08 95       	ret

00000868 <__floatunsisf>:
 868:	e8 94       	clt
 86a:	09 c0       	rjmp	.+18     	; 0x87e <__floatsisf+0x12>

0000086c <__floatsisf>:
 86c:	97 fb       	bst	r25, 7
 86e:	3e f4       	brtc	.+14     	; 0x87e <__floatsisf+0x12>
 870:	90 95       	com	r25
 872:	80 95       	com	r24
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	99 23       	and	r25, r25
 880:	a9 f0       	breq	.+42     	; 0x8ac <__floatsisf+0x40>
 882:	f9 2f       	mov	r31, r25
 884:	96 e9       	ldi	r25, 0x96	; 150
 886:	bb 27       	eor	r27, r27
 888:	93 95       	inc	r25
 88a:	f6 95       	lsr	r31
 88c:	87 95       	ror	r24
 88e:	77 95       	ror	r23
 890:	67 95       	ror	r22
 892:	b7 95       	ror	r27
 894:	f1 11       	cpse	r31, r1
 896:	f8 cf       	rjmp	.-16     	; 0x888 <__floatsisf+0x1c>
 898:	fa f4       	brpl	.+62     	; 0x8d8 <__floatsisf+0x6c>
 89a:	bb 0f       	add	r27, r27
 89c:	11 f4       	brne	.+4      	; 0x8a2 <__floatsisf+0x36>
 89e:	60 ff       	sbrs	r22, 0
 8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__floatsisf+0x6c>
 8a2:	6f 5f       	subi	r22, 0xFF	; 255
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	8f 4f       	sbci	r24, 0xFF	; 255
 8a8:	9f 4f       	sbci	r25, 0xFF	; 255
 8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <__floatsisf+0x6c>
 8ac:	88 23       	and	r24, r24
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <__floatsisf+0x48>
 8b0:	96 e9       	ldi	r25, 0x96	; 150
 8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <__floatsisf+0x6a>
 8b4:	77 23       	and	r23, r23
 8b6:	21 f0       	breq	.+8      	; 0x8c0 <__floatsisf+0x54>
 8b8:	9e e8       	ldi	r25, 0x8E	; 142
 8ba:	87 2f       	mov	r24, r23
 8bc:	76 2f       	mov	r23, r22
 8be:	05 c0       	rjmp	.+10     	; 0x8ca <__floatsisf+0x5e>
 8c0:	66 23       	and	r22, r22
 8c2:	71 f0       	breq	.+28     	; 0x8e0 <__floatsisf+0x74>
 8c4:	96 e8       	ldi	r25, 0x86	; 134
 8c6:	86 2f       	mov	r24, r22
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	2a f0       	brmi	.+10     	; 0x8d8 <__floatsisf+0x6c>
 8ce:	9a 95       	dec	r25
 8d0:	66 0f       	add	r22, r22
 8d2:	77 1f       	adc	r23, r23
 8d4:	88 1f       	adc	r24, r24
 8d6:	da f7       	brpl	.-10     	; 0x8ce <__floatsisf+0x62>
 8d8:	88 0f       	add	r24, r24
 8da:	96 95       	lsr	r25
 8dc:	87 95       	ror	r24
 8de:	97 f9       	bld	r25, 7
 8e0:	08 95       	ret

000008e2 <__fp_cmp>:
 8e2:	99 0f       	add	r25, r25
 8e4:	00 08       	sbc	r0, r0
 8e6:	55 0f       	add	r21, r21
 8e8:	aa 0b       	sbc	r26, r26
 8ea:	e0 e8       	ldi	r30, 0x80	; 128
 8ec:	fe ef       	ldi	r31, 0xFE	; 254
 8ee:	16 16       	cp	r1, r22
 8f0:	17 06       	cpc	r1, r23
 8f2:	e8 07       	cpc	r30, r24
 8f4:	f9 07       	cpc	r31, r25
 8f6:	c0 f0       	brcs	.+48     	; 0x928 <__fp_cmp+0x46>
 8f8:	12 16       	cp	r1, r18
 8fa:	13 06       	cpc	r1, r19
 8fc:	e4 07       	cpc	r30, r20
 8fe:	f5 07       	cpc	r31, r21
 900:	98 f0       	brcs	.+38     	; 0x928 <__fp_cmp+0x46>
 902:	62 1b       	sub	r22, r18
 904:	73 0b       	sbc	r23, r19
 906:	84 0b       	sbc	r24, r20
 908:	95 0b       	sbc	r25, r21
 90a:	39 f4       	brne	.+14     	; 0x91a <__fp_cmp+0x38>
 90c:	0a 26       	eor	r0, r26
 90e:	61 f0       	breq	.+24     	; 0x928 <__fp_cmp+0x46>
 910:	23 2b       	or	r18, r19
 912:	24 2b       	or	r18, r20
 914:	25 2b       	or	r18, r21
 916:	21 f4       	brne	.+8      	; 0x920 <__fp_cmp+0x3e>
 918:	08 95       	ret
 91a:	0a 26       	eor	r0, r26
 91c:	09 f4       	brne	.+2      	; 0x920 <__fp_cmp+0x3e>
 91e:	a1 40       	sbci	r26, 0x01	; 1
 920:	a6 95       	lsr	r26
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	81 1d       	adc	r24, r1
 926:	81 1d       	adc	r24, r1
 928:	08 95       	ret

0000092a <__fp_inf>:
 92a:	97 f9       	bld	r25, 7
 92c:	9f 67       	ori	r25, 0x7F	; 127
 92e:	80 e8       	ldi	r24, 0x80	; 128
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	08 95       	ret

00000936 <__fp_nan>:
 936:	9f ef       	ldi	r25, 0xFF	; 255
 938:	80 ec       	ldi	r24, 0xC0	; 192
 93a:	08 95       	ret

0000093c <__fp_pscA>:
 93c:	00 24       	eor	r0, r0
 93e:	0a 94       	dec	r0
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	18 06       	cpc	r1, r24
 946:	09 06       	cpc	r0, r25
 948:	08 95       	ret

0000094a <__fp_pscB>:
 94a:	00 24       	eor	r0, r0
 94c:	0a 94       	dec	r0
 94e:	12 16       	cp	r1, r18
 950:	13 06       	cpc	r1, r19
 952:	14 06       	cpc	r1, r20
 954:	05 06       	cpc	r0, r21
 956:	08 95       	ret

00000958 <__fp_round>:
 958:	09 2e       	mov	r0, r25
 95a:	03 94       	inc	r0
 95c:	00 0c       	add	r0, r0
 95e:	11 f4       	brne	.+4      	; 0x964 <__fp_round+0xc>
 960:	88 23       	and	r24, r24
 962:	52 f0       	brmi	.+20     	; 0x978 <__fp_round+0x20>
 964:	bb 0f       	add	r27, r27
 966:	40 f4       	brcc	.+16     	; 0x978 <__fp_round+0x20>
 968:	bf 2b       	or	r27, r31
 96a:	11 f4       	brne	.+4      	; 0x970 <__fp_round+0x18>
 96c:	60 ff       	sbrs	r22, 0
 96e:	04 c0       	rjmp	.+8      	; 0x978 <__fp_round+0x20>
 970:	6f 5f       	subi	r22, 0xFF	; 255
 972:	7f 4f       	sbci	r23, 0xFF	; 255
 974:	8f 4f       	sbci	r24, 0xFF	; 255
 976:	9f 4f       	sbci	r25, 0xFF	; 255
 978:	08 95       	ret

0000097a <__fp_split3>:
 97a:	57 fd       	sbrc	r21, 7
 97c:	90 58       	subi	r25, 0x80	; 128
 97e:	44 0f       	add	r20, r20
 980:	55 1f       	adc	r21, r21
 982:	59 f0       	breq	.+22     	; 0x99a <__fp_splitA+0x10>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	71 f0       	breq	.+28     	; 0x9a4 <__fp_splitA+0x1a>
 988:	47 95       	ror	r20

0000098a <__fp_splitA>:
 98a:	88 0f       	add	r24, r24
 98c:	97 fb       	bst	r25, 7
 98e:	99 1f       	adc	r25, r25
 990:	61 f0       	breq	.+24     	; 0x9aa <__fp_splitA+0x20>
 992:	9f 3f       	cpi	r25, 0xFF	; 255
 994:	79 f0       	breq	.+30     	; 0x9b4 <__fp_splitA+0x2a>
 996:	87 95       	ror	r24
 998:	08 95       	ret
 99a:	12 16       	cp	r1, r18
 99c:	13 06       	cpc	r1, r19
 99e:	14 06       	cpc	r1, r20
 9a0:	55 1f       	adc	r21, r21
 9a2:	f2 cf       	rjmp	.-28     	; 0x988 <__fp_split3+0xe>
 9a4:	46 95       	lsr	r20
 9a6:	f1 df       	rcall	.-30     	; 0x98a <__fp_splitA>
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <__fp_splitA+0x30>
 9aa:	16 16       	cp	r1, r22
 9ac:	17 06       	cpc	r1, r23
 9ae:	18 06       	cpc	r1, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	f1 cf       	rjmp	.-30     	; 0x996 <__fp_splitA+0xc>
 9b4:	86 95       	lsr	r24
 9b6:	71 05       	cpc	r23, r1
 9b8:	61 05       	cpc	r22, r1
 9ba:	08 94       	sec
 9bc:	08 95       	ret

000009be <__fp_zero>:
 9be:	e8 94       	clt

000009c0 <__fp_szero>:
 9c0:	bb 27       	eor	r27, r27
 9c2:	66 27       	eor	r22, r22
 9c4:	77 27       	eor	r23, r23
 9c6:	cb 01       	movw	r24, r22
 9c8:	97 f9       	bld	r25, 7
 9ca:	08 95       	ret

000009cc <__mulsf3>:
 9cc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__mulsf3x>
 9d0:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_round>
 9d4:	0e 94 9e 04 	call	0x93c	; 0x93c <__fp_pscA>
 9d8:	38 f0       	brcs	.+14     	; 0x9e8 <__mulsf3+0x1c>
 9da:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscB>
 9de:	20 f0       	brcs	.+8      	; 0x9e8 <__mulsf3+0x1c>
 9e0:	95 23       	and	r25, r21
 9e2:	11 f0       	breq	.+4      	; 0x9e8 <__mulsf3+0x1c>
 9e4:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 9e8:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_nan>
 9ec:	11 24       	eor	r1, r1
 9ee:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>

000009f2 <__mulsf3x>:
 9f2:	0e 94 bd 04 	call	0x97a	; 0x97a <__fp_split3>
 9f6:	70 f3       	brcs	.-36     	; 0x9d4 <__mulsf3+0x8>

000009f8 <__mulsf3_pse>:
 9f8:	95 9f       	mul	r25, r21
 9fa:	c1 f3       	breq	.-16     	; 0x9ec <__mulsf3+0x20>
 9fc:	95 0f       	add	r25, r21
 9fe:	50 e0       	ldi	r21, 0x00	; 0
 a00:	55 1f       	adc	r21, r21
 a02:	62 9f       	mul	r22, r18
 a04:	f0 01       	movw	r30, r0
 a06:	72 9f       	mul	r23, r18
 a08:	bb 27       	eor	r27, r27
 a0a:	f0 0d       	add	r31, r0
 a0c:	b1 1d       	adc	r27, r1
 a0e:	63 9f       	mul	r22, r19
 a10:	aa 27       	eor	r26, r26
 a12:	f0 0d       	add	r31, r0
 a14:	b1 1d       	adc	r27, r1
 a16:	aa 1f       	adc	r26, r26
 a18:	64 9f       	mul	r22, r20
 a1a:	66 27       	eor	r22, r22
 a1c:	b0 0d       	add	r27, r0
 a1e:	a1 1d       	adc	r26, r1
 a20:	66 1f       	adc	r22, r22
 a22:	82 9f       	mul	r24, r18
 a24:	22 27       	eor	r18, r18
 a26:	b0 0d       	add	r27, r0
 a28:	a1 1d       	adc	r26, r1
 a2a:	62 1f       	adc	r22, r18
 a2c:	73 9f       	mul	r23, r19
 a2e:	b0 0d       	add	r27, r0
 a30:	a1 1d       	adc	r26, r1
 a32:	62 1f       	adc	r22, r18
 a34:	83 9f       	mul	r24, r19
 a36:	a0 0d       	add	r26, r0
 a38:	61 1d       	adc	r22, r1
 a3a:	22 1f       	adc	r18, r18
 a3c:	74 9f       	mul	r23, r20
 a3e:	33 27       	eor	r19, r19
 a40:	a0 0d       	add	r26, r0
 a42:	61 1d       	adc	r22, r1
 a44:	23 1f       	adc	r18, r19
 a46:	84 9f       	mul	r24, r20
 a48:	60 0d       	add	r22, r0
 a4a:	21 1d       	adc	r18, r1
 a4c:	82 2f       	mov	r24, r18
 a4e:	76 2f       	mov	r23, r22
 a50:	6a 2f       	mov	r22, r26
 a52:	11 24       	eor	r1, r1
 a54:	9f 57       	subi	r25, 0x7F	; 127
 a56:	50 40       	sbci	r21, 0x00	; 0
 a58:	9a f0       	brmi	.+38     	; 0xa80 <__mulsf3_pse+0x88>
 a5a:	f1 f0       	breq	.+60     	; 0xa98 <__mulsf3_pse+0xa0>
 a5c:	88 23       	and	r24, r24
 a5e:	4a f0       	brmi	.+18     	; 0xa72 <__mulsf3_pse+0x7a>
 a60:	ee 0f       	add	r30, r30
 a62:	ff 1f       	adc	r31, r31
 a64:	bb 1f       	adc	r27, r27
 a66:	66 1f       	adc	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	91 50       	subi	r25, 0x01	; 1
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	a9 f7       	brne	.-22     	; 0xa5c <__mulsf3_pse+0x64>
 a72:	9e 3f       	cpi	r25, 0xFE	; 254
 a74:	51 05       	cpc	r21, r1
 a76:	80 f0       	brcs	.+32     	; 0xa98 <__mulsf3_pse+0xa0>
 a78:	0c 94 95 04 	jmp	0x92a	; 0x92a <__fp_inf>
 a7c:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__fp_szero>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	e4 f3       	brlt	.-8      	; 0xa7c <__mulsf3_pse+0x84>
 a84:	98 3e       	cpi	r25, 0xE8	; 232
 a86:	d4 f3       	brlt	.-12     	; 0xa7c <__mulsf3_pse+0x84>
 a88:	86 95       	lsr	r24
 a8a:	77 95       	ror	r23
 a8c:	67 95       	ror	r22
 a8e:	b7 95       	ror	r27
 a90:	f7 95       	ror	r31
 a92:	e7 95       	ror	r30
 a94:	9f 5f       	subi	r25, 0xFF	; 255
 a96:	c1 f7       	brne	.-16     	; 0xa88 <__mulsf3_pse+0x90>
 a98:	fe 2b       	or	r31, r30
 a9a:	88 0f       	add	r24, r24
 a9c:	91 1d       	adc	r25, r1
 a9e:	96 95       	lsr	r25
 aa0:	87 95       	ror	r24
 aa2:	97 f9       	bld	r25, 7
 aa4:	08 95       	ret

00000aa6 <_exit>:
 aa6:	f8 94       	cli

00000aa8 <__stop_program>:
 aa8:	ff cf       	rjmp	.-2      	; 0xaa8 <__stop_program>
